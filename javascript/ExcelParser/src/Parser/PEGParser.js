define("Parser/PEGParser", ["Parser/PEG", "Parser/AST/AST", "FSharp/FSharp"], function (PEG, AST, FSharp) {
    PEGParser = (function(){
        /*
         * Generated by PEG.js 0.7.0.
         *
         * http://pegjs.majda.cz/
         */

        function quote(s) {
            /*
             * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
             * string literal except for the closing quote character, backslash,
             * carriage return, line separator, paragraph separator, and line feed.
             * Any character may appear in the form of an escape sequence.
             *
             * For portability, we also escape escape all control and non-ASCII
             * characters. Note that "\0" and "\v" escape sequences are not used
             * because JSHint does not like the first and IE the second.
             */
            return '"' + s
                .replace(/\\/g, '\\\\')  // backslash
                .replace(/"/g, '\\"')    // closing quote character
                .replace(/\x08/g, '\\b') // backspace
                .replace(/\t/g, '\\t')   // horizontal tab
                .replace(/\n/g, '\\n')   // line feed
                .replace(/\f/g, '\\f')   // form feed
                .replace(/\r/g, '\\r')   // carriage return
                .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
                + '"';
        }

        var result = {
            /*
             * Parses the input with a generated parser. If the parsing is successfull,
             * returns a value explicitly or implicitly specified by the grammar from
             * which the parser was generated (see |PEG.buildParser|). If the parsing is
             * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
             */
            parse: function(input, startRule) {
                var parseFunctions = {
                    "Int32": parse_Int32,
                    "AsciiUpper": parse_AsciiUpper,
                    "character": parse_character,
                    "letter": parse_letter,
                    "digit": parse_digit,
                    "AddrR": parse_AddrR,
                    "AddrC": parse_AddrC,
                    "AddrR1C1": parse_AddrR1C1,
                    "AddrA": parse_AddrA,
                    "AddrAAbs": parse_AddrAAbs,
                    "Addr1": parse_Addr1,
                    "Addr1Abs": parse_Addr1Abs,
                    "AddrA1": parse_AddrA1,
                    "AnyAddr": parse_AnyAddr,
                    "MoreAddrR1C1": parse_MoreAddrR1C1,
                    "RangeR1C1": parse_RangeR1C1,
                    "MoreAddrA1": parse_MoreAddrA1,
                    "RangeA1": parse_RangeA1,
                    "RangeAny": parse_RangeAny,
                    "WorksheetNameQuoted": parse_WorksheetNameQuoted,
                    "WorksheetNameUnquoted": parse_WorksheetNameUnquoted,
                    "WorksheetName": parse_WorksheetName,
                    "WorkbookName": parse_WorkbookName,
                    "Workbook": parse_Workbook,
                    "RangeReferenceWorksheet": parse_RangeReferenceWorksheet,
                    "RangeReferenceNoWorksheet": parse_RangeReferenceNoWorksheet,
                    "RangeReference": parse_RangeReference,
                    "AddressReferenceWorksheet": parse_AddressReferenceWorksheet,
                    "AddressReferenceNoWorksheet": parse_AddressReferenceNoWorksheet,
                    "AddressReference": parse_AddressReference,
                    "NamedReferenceFirstChar": parse_NamedReferenceFirstChar,
                    "NamedReferenceLastChars": parse_NamedReferenceLastChars,
                    "NamedReference": parse_NamedReference,
                    "StringReference": parse_StringReference,
                    "ConstantReference": parse_ConstantReference,
                    "ReferenceKinds": parse_ReferenceKinds,
                    "Reference": parse_Reference,
                    "BinOpChar": parse_BinOpChar,
                    "BinOp2Char": parse_BinOp2Char,
                    "BinOpLong": parse_BinOpLong,
                    "BinOpShort": parse_BinOpShort,
                    "BinOp": parse_BinOp,
                    "UnaryOpChar": parse_UnaryOpChar,
                    "ParensExpr": parse_ParensExpr,
                    "ExpressionAtom": parse_ExpressionAtom,
                    "ExpressionSimple": parse_ExpressionSimple,
                    "UnaryOpExpr": parse_UnaryOpExpr,
                    "BinOpExpr": parse_BinOpExpr,
                    "ExpressionDecl": parse_ExpressionDecl,
                    "FunctionName": parse_FunctionName,
                    "Function": parse_Function,
                    "ArgumentList": parse_ArgumentList,
                    "Formula": parse_Formula
                };

                if (startRule !== undefined) {
                    if (parseFunctions[startRule] === undefined) {
                        throw new Error("Invalid rule name: " + quote(startRule) + ".");
                    }
                } else {
                    startRule = "Int32";
                }

                var pos = 0;
                var reportFailures = 0;
                var rightmostFailuresPos = 0;
                var rightmostFailuresExpected = [];

                function padLeft(input, padding, length) {
                    var result = input;

                    var padLength = length - input.length;
                    for (var i = 0; i < padLength; i++) {
                        result = padding + result;
                    }

                    return result;
                }

                function escape(ch) {
                    var charCode = ch.charCodeAt(0);
                    var escapeChar;
                    var length;

                    if (charCode <= 0xFF) {
                        escapeChar = 'x';
                        length = 2;
                    } else {
                        escapeChar = 'u';
                        length = 4;
                    }

                    return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
                }

                function matchFailed(failure) {
                    if (pos < rightmostFailuresPos) {
                        return;
                    }

                    if (pos > rightmostFailuresPos) {
                        rightmostFailuresPos = pos;
                        rightmostFailuresExpected = [];
                    }

                    rightmostFailuresExpected.push(failure);
                }

                function parse_Int32() {
                    var result0, result1, result2, result3, result4;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    if (/^[+\-]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[+\\-]");
                        }
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 48) {
                            result1 = "0";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"0\"");
                            }
                        }
                        if (result1 !== null) {
                            if (/^[oO]/.test(input.charAt(pos))) {
                                result2 = input.charAt(pos);
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[oO]");
                                }
                            }
                            if (result2 !== null) {
                                if (/^[0-7]/.test(input.charAt(pos))) {
                                    result4 = input.charAt(pos);
                                    pos++;
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("[0-7]");
                                    }
                                }
                                if (result4 !== null) {
                                    result3 = [];
                                    while (result4 !== null) {
                                        result3.push(result4);
                                        if (/^[0-7]/.test(input.charAt(pos))) {
                                            result4 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            result4 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("[0-7]");
                                            }
                                        }
                                    }
                                } else {
                                    result3 = null;
                                }
                                if (result3 !== null) {
                                    result1 = [result1, result2, result3];
                                } else {
                                    result1 = null;
                                    pos = pos3;
                                }
                            } else {
                                result1 = null;
                                pos = pos3;
                            }
                        } else {
                            result1 = null;
                            pos = pos3;
                        }
                        if (result1 !== null) {
                            result1 = (function(offset, oct) { var res=[]; for(var i=0; i<oct.length; i++) if(oct[i] instanceof Array) res.push(oct[i].join("")); else res.push(oct[i]); var a = res.join(""); return parseInt(a.slice(0,1)+a.slice(2), 8);})(pos2, result1);
                        }
                        if (result1 === null) {
                            pos = pos2;
                        }
                        if (result1 === null) {
                            pos2 = pos;
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 48) {
                                result1 = "0";
                                pos++;
                            } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"0\"");
                                }
                            }
                            if (result1 !== null) {
                                if (/^[bB]/.test(input.charAt(pos))) {
                                    result2 = input.charAt(pos);
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("[bB]");
                                    }
                                }
                                if (result2 !== null) {
                                    if (/^[01]/.test(input.charAt(pos))) {
                                        result4 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        result4 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("[01]");
                                        }
                                    }
                                    if (result4 !== null) {
                                        result3 = [];
                                        while (result4 !== null) {
                                            result3.push(result4);
                                            if (/^[01]/.test(input.charAt(pos))) {
                                                result4 = input.charAt(pos);
                                                pos++;
                                            } else {
                                                result4 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("[01]");
                                                }
                                            }
                                        }
                                    } else {
                                        result3 = null;
                                    }
                                    if (result3 !== null) {
                                        result1 = [result1, result2, result3];
                                    } else {
                                        result1 = null;
                                        pos = pos3;
                                    }
                                } else {
                                    result1 = null;
                                    pos = pos3;
                                }
                            } else {
                                result1 = null;
                                pos = pos3;
                            }
                            if (result1 !== null) {
                                result1 = (function(offset, b) { var res=[]; for(var i=0; i<b.length; i++) if(b[i] instanceof Array) res.push(b[i].join("")); else res.push(b[i]); var a = res.join(""); return parseInt(a.slice(0,1)+a.slice(2), 2);})(pos2, result1);
                            }
                            if (result1 === null) {
                                pos = pos2;
                            }
                            if (result1 === null) {
                                pos2 = pos;
                                pos3 = pos;
                                if (input.charCodeAt(pos) === 48) {
                                    result1 = "0";
                                    pos++;
                                } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"0\"");
                                    }
                                }
                                if (result1 !== null) {
                                    if (/^[xX]/.test(input.charAt(pos))) {
                                        result2 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("[xX]");
                                        }
                                    }
                                    if (result2 !== null) {
                                        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
                                            result4 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            result4 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("[0-9a-fA-F]");
                                            }
                                        }
                                        if (result4 !== null) {
                                            result3 = [];
                                            while (result4 !== null) {
                                                result3.push(result4);
                                                if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
                                                    result4 = input.charAt(pos);
                                                    pos++;
                                                } else {
                                                    result4 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("[0-9a-fA-F]");
                                                    }
                                                }
                                            }
                                        } else {
                                            result3 = null;
                                        }
                                        if (result3 !== null) {
                                            result1 = [result1, result2, result3];
                                        } else {
                                            result1 = null;
                                            pos = pos3;
                                        }
                                    } else {
                                        result1 = null;
                                        pos = pos3;
                                    }
                                } else {
                                    result1 = null;
                                    pos = pos3;
                                }
                                if (result1 !== null) {
                                    result1 = (function(offset, h) { var res=[]; for(var i=0; i<h.length; i++)
                                        if(h[i] instanceof Array) res.push(h[i].join("")); else res.push(h[i]); var a = res.join(""); return parseInt(a, 16);})(pos2, result1);
                                }
                                if (result1 === null) {
                                    pos = pos2;
                                }
                                if (result1 === null) {
                                    pos2 = pos;
                                    if (/^[0-9]/.test(input.charAt(pos))) {
                                        result2 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("[0-9]");
                                        }
                                    }
                                    if (result2 !== null) {
                                        result1 = [];
                                        while (result2 !== null) {
                                            result1.push(result2);
                                            if (/^[0-9]/.test(input.charAt(pos))) {
                                                result2 = input.charAt(pos);
                                                pos++;
                                            } else {
                                                result2 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("[0-9]");
                                                }
                                            }
                                        }
                                    } else {
                                        result1 = null;
                                    }
                                    if (result1 !== null) {
                                        result1 = (function(offset, d) {return d.join("");})(pos2, result1);
                                    }
                                    if (result1 === null) {
                                        pos = pos2;
                                    }
                                }
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, s, number) {return parseInt(s+number);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AsciiUpper() {
                    var result0;

                    if (/^[A-Z]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[A-Z]");
                        }
                    }
                    return result0;
                }

                function parse_character() {
                    var result0;

                    if (/^[^\uFFFE-\uFFFF]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[^\\uFFFE-\\uFFFF]");
                        }
                    }
                    return result0;
                }

                function parse_letter() {
                    var result0;

                    if (/^[a-z]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-z]");
                        }
                    }
                    if (result0 === null) {
                        if (/^[A-Z]/.test(input.charAt(pos))) {
                            result0 = input.charAt(pos);
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("[A-Z]");
                            }
                        }
                    }
                    return result0;
                }

                function parse_digit() {
                    var result0;

                    if (/^[0-9]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[0-9]");
                        }
                    }
                    return result0;
                }

                function parse_AddrR() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 82) {
                        result0 = "R";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"R\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Int32();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrC() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 67) {
                        result0 = "C";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"C\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Int32();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrR1C1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrR();
                    if (result0 !== null) {
                        result1 = parse_AddrC();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r, c) {return new AST.Address(r, c, null, null);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrA() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_AsciiUpper();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_AsciiUpper();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrAAbs() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 36) {
                        result0 = "$";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"$\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = "";
                    }
                    if (result0 !== null) {
                        result1 = parse_AddrA();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Addr1() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_Int32();
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Addr1Abs() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 36) {
                        result0 = "$";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"$\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = "";
                    }
                    if (result0 !== null) {
                        result1 = parse_Addr1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrA1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrAAbs();
                    if (result0 !== null) {
                        result1 = parse_Addr1Abs();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, l, r) {return new AST.Address(r, l, null, null);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AnyAddr() {
                    var result0;

                    result0 = parse_AddrR1C1();
                    if (result0 === null) {
                        result0 = parse_AddrA1();
                    }
                    return result0;
                }

                function parse_MoreAddrR1C1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 58) {
                        result0 = ":";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\":\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_AddrR1C1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeR1C1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrR1C1();
                    if (result0 !== null) {
                        result1 = parse_MoreAddrR1C1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r, l) {return new AST.Range(r, l);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_MoreAddrA1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 58) {
                        result0 = ":";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\":\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_AddrA1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeA1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrA1();
                    if (result0 !== null) {
                        result1 = parse_MoreAddrA1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r, l) {return new AST.Range(r, l);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeAny() {
                    var result0;

                    result0 = parse_RangeR1C1();
                    if (result0 === null) {
                        result0 = parse_RangeA1();
                    }
                    return result0;
                }

                function parse_WorksheetNameQuoted() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 39) {
                        result0 = "'";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"'\"");
                        }
                    }
                    if (result0 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        reportFailures++;
                        if (input.charCodeAt(pos) === 39) {
                            result2 = "'";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"'\"");
                            }
                        }
                        reportFailures--;
                        if (result2 === null) {
                            result2 = "";
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        if (result2 !== null) {
                            result3 = parse_character();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos2;
                            }
                        } else {
                            result2 = null;
                            pos = pos2;
                        }
                        if (result2 !== null) {
                            result1 = [];
                            while (result2 !== null) {
                                result1.push(result2);
                                pos2 = pos;
                                pos3 = pos;
                                reportFailures++;
                                if (input.charCodeAt(pos) === 39) {
                                    result2 = "'";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"'\"");
                                    }
                                }
                                reportFailures--;
                                if (result2 === null) {
                                    result2 = "";
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                                if (result2 !== null) {
                                    result3 = parse_character();
                                    if (result3 !== null) {
                                        result2 = [result2, result3];
                                    } else {
                                        result2 = null;
                                        pos = pos2;
                                    }
                                } else {
                                    result2 = null;
                                    pos = pos2;
                                }
                            }
                        } else {
                            result1 = null;
                        }
                        if (result1 !== null) {
                            if (input.charCodeAt(pos) === 39) {
                                result2 = "'";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"'\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { var res=[]; for(var i=0; i<r.length; i++) res.push(r[i].join("")); return res.join("");})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_WorksheetNameUnquoted() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_digit();
                    if (result1 === null) {
                        result1 = parse_letter();
                    }
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_digit();
                            if (result1 === null) {
                                result1 = parse_letter();
                            }
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_WorksheetName() {
                    var result0;

                    result0 = parse_WorksheetNameQuoted();
                    if (result0 === null) {
                        result0 = parse_WorksheetNameUnquoted();
                    }
                    return result0;
                }

                function parse_WorkbookName() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 91) {
                        result0 = "[";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"[\"");
                        }
                    }
                    if (result0 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        reportFailures++;
                        if (input.charCodeAt(pos) === 91) {
                            result2 = "[";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"[\"");
                            }
                        }
                        if (result2 === null) {
                            if (input.charCodeAt(pos) === 93) {
                                result2 = "]";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                }
                            }
                        }
                        reportFailures--;
                        if (result2 === null) {
                            result2 = "";
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        if (result2 !== null) {
                            result3 = parse_character();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos2;
                            }
                        } else {
                            result2 = null;
                            pos = pos2;
                        }
                        if (result2 !== null) {
                            result1 = [];
                            while (result2 !== null) {
                                result1.push(result2);
                                pos2 = pos;
                                pos3 = pos;
                                reportFailures++;
                                if (input.charCodeAt(pos) === 91) {
                                    result2 = "[";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"[\"");
                                    }
                                }
                                if (result2 === null) {
                                    if (input.charCodeAt(pos) === 93) {
                                        result2 = "]";
                                        pos++;
                                    } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"]\"");
                                        }
                                    }
                                }
                                reportFailures--;
                                if (result2 === null) {
                                    result2 = "";
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                                if (result2 !== null) {
                                    result3 = parse_character();
                                    if (result3 !== null) {
                                        result2 = [result2, result3];
                                    } else {
                                        result2 = null;
                                        pos = pos2;
                                    }
                                } else {
                                    result2 = null;
                                    pos = pos2;
                                }
                            }
                        } else {
                            result1 = null;
                        }
                        if (result1 !== null) {
                            if (input.charCodeAt(pos) === 93) {
                                result2 = "]";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { var res=[]; for(var i=0; i<r.length; i++) res.push(r[i].join("")); return res.join("");})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Workbook() {
                    var result0;
                    var pos0;

                    result0 = parse_WorkbookName();
                    if (result0 === null) {
                        pos0 = pos;
                        result0 = "";
                        if (result0 !== null) {
                            result0 = (function(offset) {return new FSharp.None();})(pos0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                    }
                    return result0;
                }

                function parse_RangeReferenceWorksheet() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_WorksheetName();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 33) {
                            result1 = "!";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"!\"");
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos2;
                        }
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_RangeAny();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, wsname, rng) {return new AST.ReferenceRange(wsname, rng);})(pos0, result0[0][0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeReferenceNoWorksheet() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_RangeAny();
                    if (result0 !== null) {
                        result0 = (function(offset, rng) {return new AST.ReferenceRange(null, rng);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeReference() {
                    var result0;

                    result0 = parse_RangeReferenceWorksheet();
                    if (result0 === null) {
                        result0 = parse_RangeReferenceNoWorksheet();
                    }
                    return result0;
                }

                function parse_AddressReferenceWorksheet() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_WorksheetName();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 33) {
                            result1 = "!";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"!\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_AnyAddr();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, wsname, addr) {return new AST.ReferenceAddress(wsname, addr);})(pos0, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddressReferenceNoWorksheet() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_AnyAddr();
                    if (result0 !== null) {
                        result0 = (function(offset, addr) {return new AST.ReferenceAddress(null, addr);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddressReference() {
                    var result0;

                    result0 = parse_AddressReferenceWorksheet();
                    if (result0 === null) {
                        result0 = parse_AddressReferenceNoWorksheet();
                    }
                    return result0;
                }

                function parse_NamedReferenceFirstChar() {
                    var result0;

                    if (input.charCodeAt(pos) === 95) {
                        result0 = "_";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"_\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = parse_letter();
                    }
                    return result0;
                }

                function parse_NamedReferenceLastChars() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result0 = [];
                    if (input.charCodeAt(pos) === 95) {
                        result1 = "_";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"_\"");
                        }
                    }
                    if (result1 === null) {
                        result1 = parse_letter();
                        if (result1 === null) {
                            result1 = parse_digit();
                        }
                    }
                    while (result1 !== null) {
                        result0.push(result1);
                        if (input.charCodeAt(pos) === 95) {
                            result1 = "_";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"_\"");
                            }
                        }
                        if (result1 === null) {
                            result1 = parse_letter();
                            if (result1 === null) {
                                result1 = parse_digit();
                            }
                        }
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_NamedReference() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_NamedReferenceFirstChar();
                    if (result0 !== null) {
                        result1 = parse_NamedReferenceLastChars();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c, s) {return new AST.ReferenceNamed(null, c+s);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_StringReference() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    if (/^["]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[\"]");
                        }
                    }
                    if (result0 !== null) {
                        pos2 = pos;
                        pos3 = pos;
                        reportFailures++;
                        if (/^["]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[\"]");
                            }
                        }
                        reportFailures--;
                        if (result2 === null) {
                            result2 = "";
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        if (result2 !== null) {
                            result3 = parse_character();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos2;
                            }
                        } else {
                            result2 = null;
                            pos = pos2;
                        }
                        if (result2 !== null) {
                            result1 = [];
                            while (result2 !== null) {
                                result1.push(result2);
                                pos2 = pos;
                                pos3 = pos;
                                reportFailures++;
                                if (/^["]/.test(input.charAt(pos))) {
                                    result2 = input.charAt(pos);
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("[\"]");
                                    }
                                }
                                reportFailures--;
                                if (result2 === null) {
                                    result2 = "";
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                                if (result2 !== null) {
                                    result3 = parse_character();
                                    if (result3 !== null) {
                                        result2 = [result2, result3];
                                    } else {
                                        result2 = null;
                                        pos = pos2;
                                    }
                                } else {
                                    result2 = null;
                                    pos = pos2;
                                }
                            }
                        } else {
                            result1 = null;
                        }
                        if (result1 !== null) {
                            if (/^["]/.test(input.charAt(pos))) {
                                result2 = input.charAt(pos);
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[\"]");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { var res=[]; for(var i=0; i<r.length; i++) res.push(r[i].join("")); return new AST.ReferenceString(null, res.join(""));})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ConstantReference() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_Int32();
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return new AST.ReferenceConstant(null, r);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ReferenceKinds() {
                    var result0;

                    result0 = parse_RangeReference();
                    if (result0 === null) {
                        result0 = parse_AddressReference();
                        if (result0 === null) {
                            result0 = parse_ConstantReference();
                            if (result0 === null) {
                                result0 = parse_StringReference();
                                if (result0 === null) {
                                    result0 = parse_NamedReference();
                                }
                            }
                        }
                    }
                    return result0;
                }

                function parse_Reference() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_Workbook();
                    if (result0 !== null) {
                        result1 = parse_ReferenceKinds();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, w, ref) {ref.WorkbookName = w; return ref;})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_BinOpChar() {
                    var result0;

                    if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 45) {
                            result0 = "-";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"-\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.charCodeAt(pos) === 42) {
                                result0 = "*";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"*\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 60) {
                                    result0 = "<";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"<\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 62) {
                                        result0 = ">";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\">\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 47) {
                                            result0 = "/";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"/\"");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return result0;
                }

                function parse_BinOp2Char() {
                    var result0;

                    if (input.substr(pos, 2) === "<=") {
                        result0 = "<=";
                        pos += 2;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"<=\"");
                        }
                    }
                    return result0;
                }

                function parse_BinOpLong() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_BinOp2Char();
                    if (result0 !== null) {
                        result1 = parse_ExpressionDecl();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, op, exp) {return {operator:op, expression:exp};})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_BinOpShort() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_BinOpChar();
                    if (result0 !== null) {
                        result1 = parse_ExpressionDecl();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, op, exp) {return {operator:op, expression:exp};})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_BinOp() {
                    var result0;

                    result0 = parse_BinOpLong();
                    if (result0 === null) {
                        result0 = parse_BinOpShort();
                    }
                    return result0;
                }

                function parse_UnaryOpChar() {
                    var result0;

                    if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 45) {
                            result0 = "-";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"-\"");
                            }
                        }
                    }
                    return result0;
                }

                function parse_ParensExpr() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 40) {
                        result0 = "(";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_ExpressionDecl();
                        if (result1 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result2 = ")";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, exp) {return new AST.ParensExpr(exp);})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ExpressionAtom() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_Function();
                    if (result0 !== null) {
                        result0 = (function(offset, fn) {return new AST.ReferenceExpr(fn);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        result0 = parse_Reference();
                        if (result0 !== null) {
                            result0 = (function(offset, ref) {return new AST.ReferenceExpr(ref);})(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                    }
                    return result0;
                }

                function parse_ExpressionSimple() {
                    var result0;

                    result0 = parse_ExpressionAtom();
                    if (result0 === null) {
                        result0 = parse_ParensExpr();
                    }
                    return result0;
                }

                function parse_UnaryOpExpr() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_UnaryOpChar();
                    if (result0 !== null) {
                        result1 = parse_ExpressionDecl();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, op, exp) {return new AST.UnaryOpExpr(op,exp);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_BinOpExpr() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_ExpressionSimple();
                    if (result0 !== null) {
                        result1 = parse_BinOp();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, exp, lhs) {return new AST.BinOpExpr(lhs.operator, exp, lhs.expression);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ExpressionDecl() {
                    var result0;

                    result0 = parse_UnaryOpExpr();
                    if (result0 === null) {
                        result0 = parse_BinOpExpr();
                        if (result0 === null) {
                            result0 = parse_ExpressionSimple();
                        }
                    }
                    return result0;
                }

                function parse_FunctionName() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_letter();
                    if (result1 === null) {
                        if (input.charCodeAt(pos) === 46) {
                            result1 = ".";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_letter();
                            if (result1 === null) {
                                if (input.charCodeAt(pos) === 46) {
                                    result1 = ".";
                                    pos++;
                                } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\".\"");
                                    }
                                }
                            }
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Function() {
                    var result0, result1, result2, result3;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_FunctionName();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 40) {
                            result1 = "(";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_ArgumentList();
                            if (result2 !== null) {
                                if (input.charCodeAt(pos) === 41) {
                                    result3 = ")";
                                    pos++;
                                } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, f, args) {return new AST.ReferenceFunction(null, f, args);})(pos0, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ArgumentList() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_ExpressionDecl();
                    if (result0 !== null) {
                        result1 = [];
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 44) {
                            result2 = ",";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\",\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_ExpressionDecl();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        while (result2 !== null) {
                            result1.push(result2);
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 44) {
                                result2 = ",";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result2 !== null) {
                                result3 = parse_ExpressionDecl();
                                if (result3 !== null) {
                                    result2 = [result2, result3];
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos2;
                        }
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, hd, tl) {var a=[hd]; for(i=0; i< tl.length; i++) a.push(tl[i][1]); return a; })(pos1, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos1;
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res==""?[]:res;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Formula() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 61) {
                        result0 = "=";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"=\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_ExpressionDecl();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }


                function cleanupExpected(expected) {
                    expected.sort();

                    var lastExpected = null;
                    var cleanExpected = [];
                    for (var i = 0; i < expected.length; i++) {
                        if (expected[i] !== lastExpected) {
                            cleanExpected.push(expected[i]);
                            lastExpected = expected[i];
                        }
                    }
                    return cleanExpected;
                }

                function computeErrorPosition() {
                    /*
                     * The first idea was to use |String.split| to break the input up to the
                     * error position along newlines and derive the line and column from
                     * there. However IE's |split| implementation is so broken that it was
                     * enough to prevent it.
                     */

                    var line = 1;
                    var column = 1;
                    var seenCR = false;

                    for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                        var ch = input.charAt(i);
                        if (ch === "\n") {
                            if (!seenCR) { line++; }
                            column = 1;
                            seenCR = false;
                        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                            line++;
                            column = 1;
                            seenCR = true;
                        } else {
                            column++;
                            seenCR = false;
                        }
                    }

                    return { line: line, column: column };
                }


                var result = parseFunctions[startRule]();

                /*
                 * The parser is now in one of the following three states:
                 *
                 * 1. The parser successfully parsed the whole input.
                 *
                 *    - |result !== null|
                 *    - |pos === input.length|
                 *    - |rightmostFailuresExpected| may or may not contain something
                 *
                 * 2. The parser successfully parsed only a part of the input.
                 *
                 *    - |result !== null|
                 *    - |pos < input.length|
                 *    - |rightmostFailuresExpected| may or may not contain something
                 *
                 * 3. The parser did not successfully parse any part of the input.
                 *
                 *   - |result === null|
                 *   - |pos === 0|
                 *   - |rightmostFailuresExpected| contains at least one failure
                 *
                 * All code following this comment (including called functions) must
                 * handle these states.
                 */
                if (result === null || pos !== input.length) {
                    var offset = Math.max(pos, rightmostFailuresPos);
                    var found = offset < input.length ? input.charAt(offset) : null;
                    var errorPosition = computeErrorPosition();

                    throw new this.SyntaxError(
                        cleanupExpected(rightmostFailuresExpected),
                        found,
                        offset,
                        errorPosition.line,
                        errorPosition.column
                    );
                }

                return result;
            },

            /* Returns the parser source code. */
            toSource: function() { return this._source; }
        };

        /* Thrown when a parser encounters a syntax error. */

        result.SyntaxError = function(expected, found, offset, line, column) {
            function buildMessage(expected, found) {
                var expectedHumanized, foundHumanized;

                switch (expected.length) {
                    case 0:
                        expectedHumanized = "end of input";
                        break;
                    case 1:
                        expectedHumanized = expected[0];
                        break;
                    default:
                        expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                            + " or "
                            + expected[expected.length - 1];
                }

                foundHumanized = found ? quote(found) : "end of input";

                return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
            }

            this.name = "SyntaxError";
            this.expected = expected;
            this.found = found;
            this.message = buildMessage(expected, found);
            this.offset = offset;
            this.line = line;
            this.column = column;
        };

        result.SyntaxError.prototype = Error.prototype;

        return result;
    })();

    return PEGParser;
});
