define("Parser/PEGParser", ["Parser/PEG", "Parser/AST/AST", "FSharp/FSharp"], function (PEG, AST, FSharp) {
    "use strict";
    var PEGParser = (function(){
        /*
         * Generated by PEG.js 0.7.0.
         *
         * http://pegjs.majda.cz/
         */

        function quote(s) {
            /*
             * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
             * string literal except for the closing quote character, backslash,
             * carriage return, line separator, paragraph separator, and line feed.
             * Any character may appear in the form of an escape sequence.
             *
             * For portability, we also escape escape all control and non-ASCII
             * characters. Note that "\0" and "\v" escape sequences are not used
             * because JSHint does not like the first and IE the second.
             */
            return '"' + s
                .replace(/\\/g, '\\\\')  // backslash
                .replace(/"/g, '\\"')    // closing quote character
                .replace(/\x08/g, '\\b') // backspace
                .replace(/\t/g, '\\t')   // horizontal tab
                .replace(/\n/g, '\\n')   // line feed
                .replace(/\f/g, '\\f')   // form feed
                .replace(/\r/g, '\\r')   // carriage return
                .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
                + '"';
        }

        var result = {
            /*
             * Parses the input with a generated parser. If the parsing is successfull,
             * returns a value explicitly or implicitly specified by the grammar from
             * which the parser was generated (see |PEG.buildParser|). If the parsing is
             * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
             */
            parse: function(input, startRule) {
                var parseFunctions = {
                    "Int32": parse_Int32,
                    "AsciiUpper": parse_AsciiUpper,
                    "character": parse_character,
                    "letter": parse_letter,
                    "digit": parse_digit,
                    "apostrophe": parse_apostrophe,
                    "underscore": parse_underscore,
                    "backslash": parse_backslash,
                    "full_stop": parse_full_stop,
                    "double_quote": parse_double_quote,
                    "comma": parse_comma,
                    "space": parse_space,
                    "operator": parse_operator,
                    "infix_operator": parse_infix_operator,
                    "postfix_operator": parse_postfix_operator,
                    "prefix_operator": parse_prefix_operator,
                    "AddrR": parse_AddrR,
                    "AddrC": parse_AddrC,
                    "AddrR1C1": parse_AddrR1C1,
                    "AddrA": parse_AddrA,
                    "AddrAAbs": parse_AddrAAbs,
                    "Addr1": parse_Addr1,
                    "Addr1Abs": parse_Addr1Abs,
                    "AddrA1": parse_AddrA1,
                    "AnyAddr": parse_AnyAddr,
                    "MoreAddrR1C1": parse_MoreAddrR1C1,
                    "RangeR1C1": parse_RangeR1C1,
                    "MoreAddrA1": parse_MoreAddrA1,
                    "RangeA1": parse_RangeA1,
                    "RangeAny": parse_RangeAny,
                    "WorksheetNameQuoted": parse_WorksheetNameQuoted,
                    "sheet_name_special": parse_sheet_name_special,
                    "sheet_name_start_character_special": parse_sheet_name_start_character_special,
                    "sheet_name_characters_special": parse_sheet_name_characters_special,
                    "sheet_name_character_special": parse_sheet_name_character_special,
                    "WorksheetNameUnquoted": parse_WorksheetNameUnquoted,
                    "sheet_name": parse_sheet_name,
                    "sheet_name_character": parse_sheet_name_character,
                    "WorksheetName": parse_WorksheetName,
                    "WorkbookName": parse_WorkbookName,
                    "workbook_name": parse_workbook_name,
                    "book_name_character": parse_book_name_character,
                    "Workbook": parse_Workbook,
                    "RangeReferenceWorksheet": parse_RangeReferenceWorksheet,
                    "RangeReferenceNoWorksheet": parse_RangeReferenceNoWorksheet,
                    "RangeReference": parse_RangeReference,
                    "AddressReferenceWorksheet": parse_AddressReferenceWorksheet,
                    "AddressReferenceNoWorksheet": parse_AddressReferenceNoWorksheet,
                    "AddressReference": parse_AddressReference,
                    "NamedReference": parse_NamedReference,
                    "NamedReferenceBook": parse_NamedReferenceBook,
                    "NamedReferenceFirstChar": parse_NamedReferenceFirstChar,
                    "NamedReferenceLastChars": parse_NamedReferenceLastChars,
                    "NamedReferenceCharacters": parse_NamedReferenceCharacters,
                    "ArrayConstant": parse_ArrayConstant,
                    "constant_list_rows": parse_constant_list_rows,
                    "constant_list_row": parse_constant_list_row,
                    "array_constant": parse_array_constant,
                    "StringConstant": parse_StringConstant,
                    "StringChars": parse_StringChars,
                    "StringChar": parse_StringChar,
                    "NumericalConstant": parse_NumericalConstant,
                    "numerical_constant": parse_numerical_constant,
                    "exponent_part": parse_exponent_part,
                    "sign": parse_sign,
                    "digit_sequence": parse_digit_sequence,
                    "LogicalConstant": parse_LogicalConstant,
                    "ErrorConstant": parse_ErrorConstant,
                    "Constant": parse_Constant,
                    "ReferenceKinds": parse_ReferenceKinds,
                    "Reference": parse_Reference,
                    "ParensExpr": parse_ParensExpr,
                    "FunctionName": parse_FunctionName,
                    "Function": parse_Function,
                    "ArgumentList": parse_ArgumentList,
                    "Formula": parse_Formula,
                    "ExpressionAtom": parse_ExpressionAtom,
                    "PrefixExpression": parse_PrefixExpression,
                    "ExpressionSimple": parse_ExpressionSimple,
                    "Expression": parse_Expression,
                    "aux": parse_aux
                };

                if (startRule !== undefined) {
                    if (parseFunctions[startRule] === undefined) {
                        throw new Error("Invalid rule name: " + quote(startRule) + ".");
                    }
                } else {
                    startRule = "Int32";
                }

                var pos = 0;
                var reportFailures = 0;
                var rightmostFailuresPos = 0;
                var rightmostFailuresExpected = [];

                function padLeft(input, padding, length) {
                    var result = input;

                    var padLength = length - input.length;
                    for (var i = 0; i < padLength; i++) {
                        result = padding + result;
                    }

                    return result;
                }

                function escape(ch) {
                    var charCode = ch.charCodeAt(0);
                    var escapeChar;
                    var length;

                    if (charCode <= 0xFF) {
                        escapeChar = 'x';
                        length = 2;
                    } else {
                        escapeChar = 'u';
                        length = 4;
                    }

                    return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
                }

                function matchFailed(failure) {
                    if (pos < rightmostFailuresPos) {
                        return;
                    }

                    if (pos > rightmostFailuresPos) {
                        rightmostFailuresPos = pos;
                        rightmostFailuresExpected = [];
                    }

                    rightmostFailuresExpected.push(failure);
                }

                function parse_Int32() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (/^[+\-]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[+\\-]");
                        }
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result1 = parse_digit_sequence();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, s, number) {return parseInt(s+number);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AsciiUpper() {
                    var result0;

                    if (/^[A-Z]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[A-Z]");
                        }
                    }
                    return result0;
                }

                function parse_character() {
                    var result0;

                    if (/^[^\uFFFE-\uFFFF]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[^\\uFFFE-\\uFFFF]");
                        }
                    }
                    return result0;
                }

                function parse_letter() {
                    var result0;

                    if (/^[a-z]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-z]");
                        }
                    }
                    if (result0 === null) {
                        if (/^[A-Z]/.test(input.charAt(pos))) {
                            result0 = input.charAt(pos);
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("[A-Z]");
                            }
                        }
                    }
                    return result0;
                }

                function parse_digit() {
                    var result0;

                    if (/^[0-9]/.test(input.charAt(pos))) {
                        result0 = input.charAt(pos);
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("[0-9]");
                        }
                    }
                    return result0;
                }

                function parse_apostrophe() {
                    var result0;

                    if (input.charCodeAt(pos) === 39) {
                        result0 = "'";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"'\"");
                        }
                    }
                    return result0;
                }

                function parse_underscore() {
                    var result0;

                    if (input.charCodeAt(pos) === 95) {
                        result0 = "_";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"_\"");
                        }
                    }
                    return result0;
                }

                function parse_backslash() {
                    var result0;

                    if (input.charCodeAt(pos) === 92) {
                        result0 = "\\";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\\\\"");
                        }
                    }
                    return result0;
                }

                function parse_full_stop() {
                    var result0;

                    if (input.charCodeAt(pos) === 46) {
                        result0 = ".";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\".\"");
                        }
                    }
                    return result0;
                }

                function parse_double_quote() {
                    var result0;

                    if (input.charCodeAt(pos) === 34) {
                        result0 = "\"";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\\"\"");
                        }
                    }
                    return result0;
                }

                function parse_comma() {
                    var result0;

                    if (input.charCodeAt(pos) === 44) {
                        result0 = ",";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\",\"");
                        }
                    }
                    return result0;
                }

                function parse_space() {
                    var result0;

                    if (input.charCodeAt(pos) === 32) {
                        result0 = " ";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\" \"");
                        }
                    }
                    return result0;
                }

                function parse_operator() {
                    var result0;

                    if (input.substr(pos, 2) === ">=") {
                        result0 = ">=";
                        pos += 2;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\">=\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos, 2) === "<=") {
                            result0 = "<=";
                            pos += 2;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"<=\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos, 2) === "<>") {
                                result0 = "<>";
                                pos += 2;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"<>\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 58) {
                                    result0 = ":";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 94) {
                                        result0 = "^";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"^\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 42) {
                                            result0 = "*";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"*\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.charCodeAt(pos) === 47) {
                                                result0 = "/";
                                                pos++;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"/\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.charCodeAt(pos) === 43) {
                                                    result0 = "+";
                                                    pos++;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"+\"");
                                                    }
                                                }
                                                if (result0 === null) {
                                                    if (input.charCodeAt(pos) === 45) {
                                                        result0 = "-";
                                                        pos++;
                                                    } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\"-\"");
                                                        }
                                                    }
                                                    if (result0 === null) {
                                                        if (input.charCodeAt(pos) === 38) {
                                                            result0 = "&";
                                                            pos++;
                                                        } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                                matchFailed("\"&\"");
                                                            }
                                                        }
                                                        if (result0 === null) {
                                                            if (input.charCodeAt(pos) === 61) {
                                                                result0 = "=";
                                                                pos++;
                                                            } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                    matchFailed("\"=\"");
                                                                }
                                                            }
                                                            if (result0 === null) {
                                                                if (input.charCodeAt(pos) === 60) {
                                                                    result0 = "<";
                                                                    pos++;
                                                                } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"<\"");
                                                                    }
                                                                }
                                                                if (result0 === null) {
                                                                    if (input.charCodeAt(pos) === 62) {
                                                                        result0 = ">";
                                                                        pos++;
                                                                    } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                            matchFailed("\">\"");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return result0;
                }

                function parse_infix_operator() {
                    var result0;

                    if (input.substr(pos, 2) === ">=") {
                        result0 = ">=";
                        pos += 2;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\">=\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos, 2) === "<=") {
                            result0 = "<=";
                            pos += 2;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"<=\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos, 2) === "<>") {
                                result0 = "<>";
                                pos += 2;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"<>\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 58) {
                                    result0 = ":";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 94) {
                                        result0 = "^";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"^\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 42) {
                                            result0 = "*";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"*\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.charCodeAt(pos) === 47) {
                                                result0 = "/";
                                                pos++;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"/\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.charCodeAt(pos) === 43) {
                                                    result0 = "+";
                                                    pos++;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"+\"");
                                                    }
                                                }
                                                if (result0 === null) {
                                                    if (input.charCodeAt(pos) === 45) {
                                                        result0 = "-";
                                                        pos++;
                                                    } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                            matchFailed("\"-\"");
                                                        }
                                                    }
                                                    if (result0 === null) {
                                                        if (input.charCodeAt(pos) === 38) {
                                                            result0 = "&";
                                                            pos++;
                                                        } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                                matchFailed("\"&\"");
                                                            }
                                                        }
                                                        if (result0 === null) {
                                                            if (input.charCodeAt(pos) === 61) {
                                                                result0 = "=";
                                                                pos++;
                                                            } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                    matchFailed("\"=\"");
                                                                }
                                                            }
                                                            if (result0 === null) {
                                                                if (input.charCodeAt(pos) === 60) {
                                                                    result0 = "<";
                                                                    pos++;
                                                                } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                        matchFailed("\"<\"");
                                                                    }
                                                                }
                                                                if (result0 === null) {
                                                                    if (input.charCodeAt(pos) === 62) {
                                                                        result0 = ">";
                                                                        pos++;
                                                                    } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                            matchFailed("\">\"");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return result0;
                }

                function parse_postfix_operator() {
                    var result0;

                    if (input.charCodeAt(pos) === 37) {
                        result0 = "%";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"%\"");
                        }
                    }
                    return result0;
                }

                function parse_prefix_operator() {
                    var result0;

                    if (input.charCodeAt(pos) === 45) {
                        result0 = "-";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"-\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 43) {
                            result0 = "+";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"+\"");
                            }
                        }
                    }
                    return result0;
                }

                function parse_AddrR() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 82) {
                        result0 = "R";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"R\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Int32();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrC() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 67) {
                        result0 = "C";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"C\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Int32();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrR1C1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrR();
                    if (result0 !== null) {
                        result1 = parse_AddrC();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r, c) {return new AST.Address(r, c, null, null);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrA() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_letter();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_letter();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrAAbs() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 36) {
                        result0 = "$";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"$\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = "";
                    }
                    if (result0 !== null) {
                        result1 = parse_AddrA();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Addr1() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_Int32();
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Addr1Abs() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 36) {
                        result0 = "$";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"$\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = "";
                    }
                    if (result0 !== null) {
                        result1 = parse_Addr1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddrA1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrAAbs();
                    if (result0 !== null) {
                        result1 = parse_Addr1Abs();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, l, r) {return new AST.Address(r, l, null, null);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AnyAddr() {
                    var result0;

                    result0 = parse_AddrR1C1();
                    if (result0 === null) {
                        result0 = parse_AddrA1();
                    }
                    return result0;
                }

                function parse_MoreAddrR1C1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 58) {
                        result0 = ":";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\":\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_AddrR1C1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeR1C1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrR1C1();
                    if (result0 !== null) {
                        result1 = parse_MoreAddrR1C1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r, l) {return new AST.Range(r, l);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_MoreAddrA1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 58) {
                        result0 = ":";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\":\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_AddrA1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeA1() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_AddrA1();
                    if (result0 !== null) {
                        result1 = parse_MoreAddrA1();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r, l) {return new AST.Range(r, l);})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeAny() {
                    var result0;

                    result0 = parse_RangeR1C1();
                    if (result0 === null) {
                        result0 = parse_RangeA1();
                    }
                    return result0;
                }

                function parse_WorksheetNameQuoted() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_apostrophe();
                    if (result0 !== null) {
                        result1 = parse_sheet_name_special();
                        if (result1 !== null) {
                            result2 = parse_apostrophe();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) { return r; })(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sheet_name_special() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_sheet_name_start_character_special();
                    if (result0 !== null) {
                        result1 = parse_sheet_name_characters_special();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, hd, tl) {return hd+tl;})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sheet_name_start_character_special() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    reportFailures++;
                    if (input.charCodeAt(pos) === 92) {
                        result0 = "\\";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\\\\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = parse_apostrophe();
                        if (result0 === null) {
                            if (input.charCodeAt(pos) === 42) {
                                result0 = "*";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"*\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 91) {
                                    result0 = "[";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"[\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 93) {
                                        result0 = "]";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"]\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 58) {
                                            result0 = ":";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.charCodeAt(pos) === 47) {
                                                result0 = "/";
                                                pos++;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"/\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.charCodeAt(pos) === 63) {
                                                    result0 = "?";
                                                    pos++;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"?\"");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    reportFailures--;
                    if (result0 === null) {
                        result0 = "";
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_character();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c) {return c;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sheet_name_characters_special() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_sheet_name_character_special();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_sheet_name_character_special();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sheet_name_character_special() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    reportFailures++;
                    if (input.charCodeAt(pos) === 92) {
                        result0 = "\\";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\\\\"");
                        }
                    }
                    if (result0 === null) {
                        result0 = parse_apostrophe();
                        if (result0 === null) {
                            if (input.charCodeAt(pos) === 42) {
                                result0 = "*";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"*\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 91) {
                                    result0 = "[";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"[\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 93) {
                                        result0 = "]";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"]\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 58) {
                                            result0 = ":";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.charCodeAt(pos) === 47) {
                                                result0 = "/";
                                                pos++;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"/\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.charCodeAt(pos) === 63) {
                                                    result0 = "?";
                                                    pos++;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"?\"");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    reportFailures--;
                    if (result0 === null) {
                        result0 = "";
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_character();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c) {return c;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_apostrophe();
                        if (result0 !== null) {
                            result1 = parse_apostrophe();
                            if (result1 !== null) {
                                result0 = [result0, result1];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, a1, a2) {return a1+a2;})(pos0, result0[0], result0[1]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                    }
                    return result0;
                }

                function parse_WorksheetNameUnquoted() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_sheet_name();
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sheet_name() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_sheet_name_character();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_sheet_name_character();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sheet_name_character() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    reportFailures++;
                    result0 = parse_operator();
                    if (result0 === null) {
                        result0 = parse_apostrophe();
                        if (result0 === null) {
                            if (input.charCodeAt(pos) === 91) {
                                result0 = "[";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"[\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 93) {
                                    result0 = "]";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 63) {
                                        result0 = "?";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"?\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 92) {
                                            result0 = "\\";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"\\\\\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.charCodeAt(pos) === 33) {
                                                result0 = "!";
                                                pos++;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"!\"");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    reportFailures--;
                    if (result0 === null) {
                        result0 = "";
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_character();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c) {return c;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_WorksheetName() {
                    var result0;

                    result0 = parse_WorksheetNameQuoted();
                    if (result0 === null) {
                        result0 = parse_WorksheetNameUnquoted();
                    }
                    return result0;
                }

                function parse_WorkbookName() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 91) {
                        result0 = "[";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"[\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_workbook_name();
                        if (result1 !== null) {
                            if (input.charCodeAt(pos) === 93) {
                                result2 = "]";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, book) { return book;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_workbook_name() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_book_name_character();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_book_name_character();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_book_name_character() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    reportFailures++;
                    result0 = parse_operator();
                    if (result0 === null) {
                        result0 = parse_apostrophe();
                        if (result0 === null) {
                            if (input.charCodeAt(pos) === 91) {
                                result0 = "[";
                                pos++;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"[\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos) === 93) {
                                    result0 = "]";
                                    pos++;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.charCodeAt(pos) === 63) {
                                        result0 = "?";
                                        pos++;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"?\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.charCodeAt(pos) === 33) {
                                            result0 = "!";
                                            pos++;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"!\"");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    reportFailures--;
                    if (result0 === null) {
                        result0 = "";
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_character();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c) {return c;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Workbook() {
                    var result0;
                    var pos0;

                    result0 = parse_WorkbookName();
                    if (result0 === null) {
                        pos0 = pos;
                        result0 = "";
                        if (result0 !== null) {
                            result0 = (function(offset) {return new FSharp.None();})(pos0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                    }
                    return result0;
                }

                function parse_RangeReferenceWorksheet() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_WorksheetName();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 33) {
                            result1 = "!";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"!\"");
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos2;
                        }
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_RangeAny();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, wsname, rng) {return new AST.ReferenceRange(wsname, rng);})(pos0, result0[0][0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeReferenceNoWorksheet() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_RangeAny();
                    if (result0 !== null) {
                        result0 = (function(offset, rng) {return new AST.ReferenceRange(null, rng);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_RangeReference() {
                    var result0;

                    result0 = parse_RangeReferenceWorksheet();
                    if (result0 === null) {
                        result0 = parse_RangeReferenceNoWorksheet();
                    }
                    return result0;
                }

                function parse_AddressReferenceWorksheet() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_WorksheetName();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 33) {
                            result1 = "!";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"!\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_AnyAddr();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, wsname, addr) {return new AST.ReferenceAddress(wsname, addr);})(pos0, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddressReferenceNoWorksheet() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_AnyAddr();
                    if (result0 !== null) {
                        result0 = (function(offset, addr) {return new AST.ReferenceAddress(null, addr);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_AddressReference() {
                    var result0;

                    result0 = parse_AddressReferenceWorksheet();
                    if (result0 === null) {
                        result0 = parse_AddressReferenceNoWorksheet();
                    }
                    return result0;
                }

                function parse_NamedReference() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_NamedReferenceBook();
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result1 = parse_NamedReferenceFirstChar();
                        if (result1 !== null) {
                            result2 = parse_NamedReferenceLastChars();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, wb, c, s) {var ref = new AST.ReferenceNamed(null, c+s); if(wb!=="") ref.WorkbookName = wb; return ref;})(pos0, result0[0], result0[1], result0[2]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_NamedReferenceBook() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_workbook_name();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 33) {
                            result1 = "!";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"!\"");
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, wb) {return wb;})(pos0, result0[0]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_NamedReferenceFirstChar() {
                    var result0;

                    result0 = parse_letter();
                    if (result0 === null) {
                        result0 = parse_underscore();
                        if (result0 === null) {
                            result0 = parse_backslash();
                        }
                    }
                    return result0;
                }

                function parse_NamedReferenceLastChars() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result0 = [];
                    result1 = parse_NamedReferenceCharacters();
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_NamedReferenceCharacters();
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_NamedReferenceCharacters() {
                    var result0;

                    result0 = parse_letter();
                    if (result0 === null) {
                        result0 = parse_digit();
                        if (result0 === null) {
                            result0 = parse_underscore();
                            if (result0 === null) {
                                result0 = parse_full_stop();
                            }
                        }
                    }
                    return result0;
                }

                function parse_ArrayConstant() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 123) {
                        result0 = "{";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"{\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_constant_list_rows();
                        if (result1 !== null) {
                            if (input.charCodeAt(pos) === 125) {
                                result2 = "}";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"}\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c) { if(c.length==0){ return null;}else{var norm=c[0].length; for(var i=1; i<c.length; i++){if(c[i].length!==norm)return null;} } return new AST.ConstantArray(null, c);})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_constant_list_rows() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_constant_list_row();
                    if (result0 !== null) {
                        result1 = [];
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 59) {
                            result2 = ";";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\";\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_constant_list_row();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        while (result2 !== null) {
                            result1.push(result2);
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 59) {
                                result2 = ";";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\";\"");
                                }
                            }
                            if (result2 !== null) {
                                result3 = parse_constant_list_row();
                                if (result3 !== null) {
                                    result2 = [result2, result3];
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos2;
                        }
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, hd, tl) {var a=[hd]; for(var i=0; i< tl.length; i++) a.push(tl[i][1]); return a; })(pos1, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos1;
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res==""?[]:res;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_constant_list_row() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_array_constant();
                    if (result0 !== null) {
                        result1 = [];
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 44) {
                            result2 = ",";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\",\"");
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_array_constant();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        while (result2 !== null) {
                            result1.push(result2);
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 44) {
                                result2 = ",";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result2 !== null) {
                                result3 = parse_array_constant();
                                if (result3 !== null) {
                                    result2 = [result2, result3];
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos2;
                        }
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, hd, tl) {var a=[hd]; for(var i=0; i< tl.length; i++) a.push(tl[i][1]); return a; })(pos1, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos1;
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res==""?[]:res;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_array_constant() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 45) {
                            result0 = "-";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"-\"");
                            }
                        }
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result1 = parse_NumericalConstant();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, sign, num) {if(sign) return new AST.UnaryOpExpr(sign, num); else return num; })(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        result0 = parse_ErrorConstant();
                        if (result0 === null) {
                            result0 = parse_LogicalConstant();
                            if (result0 === null) {
                                result0 = parse_StringConstant();
                            }
                        }
                    }
                    return result0;
                }

                function parse_StringConstant() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_double_quote();
                    if (result0 !== null) {
                        result1 = parse_StringChars();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                            result2 = parse_double_quote();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, str) {return new AST.ConstantString(null, str);})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_StringChars() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_StringChar();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_StringChar();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_StringChar() {
                    var result0, result1;
                    var pos0, pos1, pos2;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    reportFailures++;
                    result0 = parse_double_quote();
                    reportFailures--;
                    if (result0 === null) {
                        result0 = "";
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result1 = parse_character();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, c) {return c;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        if (input.substr(pos, 2) === "\"\"") {
                            result0 = "\"\"";
                            pos += 2;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\\"\\\"\"");
                            }
                        }
                        if (result0 !== null) {
                            result0 = (function(offset) {return '"';})(pos0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                    }
                    return result0;
                }

                function parse_NumericalConstant() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_numerical_constant();
                    if (result0 !== null) {
                        result0 = (function(offset, num) {return new AST.ConstantNumber(null, num);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_numerical_constant() {
                    var result0, result1, result2, result3;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_digit_sequence();
                    if (result0 !== null) {
                        result1 = parse_full_stop();
                        if (result1 !== null) {
                            result2 = parse_digit_sequence();
                            if (result2 !== null) {
                                result3 = parse_exponent_part();
                                result3 = result3 !== null ? result3 : "";
                                if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, whole, st, frac, exp) {return parseFloat(whole+st+frac+exp);})(pos0, result0[0], result0[1], result0[2], result0[3]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        pos1 = pos;
                        result0 = parse_digit_sequence();
                        if (result0 !== null) {
                            result1 = parse_full_stop();
                            result1 = result1 !== null ? result1 : "";
                            if (result1 !== null) {
                                result2 = parse_exponent_part();
                                result2 = result2 !== null ? result2 : "";
                                if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, whole, st, exp) {return parseFloat(whole+st+exp);})(pos0, result0[0], result0[1], result0[2]);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result0 = parse_full_stop();
                            if (result0 !== null) {
                                result1 = parse_digit_sequence();
                                if (result1 !== null) {
                                    result2 = parse_exponent_part();
                                    result2 = result2 !== null ? result2 : "";
                                    if (result2 !== null) {
                                        result0 = [result0, result1, result2];
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, st, frac, exp) {return parseFloat(st+frac+exp);})(pos0, result0[0], result0[1], result0[2]);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                        }
                    }
                    return result0;
                }

                function parse_exponent_part() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 101) {
                        result0 = "e";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"e\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 69) {
                            result0 = "E";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"E\"");
                            }
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_sign();
                        result1 = result1 !== null ? result1 : "";
                        if (result1 !== null) {
                            result2 = parse_digit_sequence();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, exp, s, dig) {return exp+s+dig;})(pos0, result0[0], result0[1], result0[2]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_sign() {
                    var result0;

                    if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos) === 45) {
                            result0 = "-";
                            pos++;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"-\"");
                            }
                        }
                    }
                    return result0;
                }

                function parse_digit_sequence() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_digit();
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_digit();
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, digs) {return digs.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_LogicalConstant() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    if (input.substr(pos, 5) === "FALSE") {
                        result0 = "FALSE";
                        pos += 5;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"FALSE\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos, 4) === "TRUE") {
                            result0 = "TRUE";
                            pos += 4;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"TRUE\"");
                            }
                        }
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, bool) {return new AST.ConstantLogical(null, bool);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ErrorConstant() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    if (input.substr(pos, 7) === "#DIV/0!") {
                        result0 = "#DIV/0!";
                        pos += 7;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"#DIV/0!\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.substr(pos, 4) === "#N/A") {
                            result0 = "#N/A";
                            pos += 4;
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"#N/A\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.substr(pos, 6) === "#NAME?") {
                                result0 = "#NAME?";
                                pos += 6;
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"#NAME?\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.substr(pos, 6) === "#NULL!") {
                                    result0 = "#NULL!";
                                    pos += 6;
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"#NULL!\"");
                                    }
                                }
                                if (result0 === null) {
                                    if (input.substr(pos, 5) === "#NUM!") {
                                        result0 = "#NUM!";
                                        pos += 5;
                                    } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"#NUM!\"");
                                        }
                                    }
                                    if (result0 === null) {
                                        if (input.substr(pos, 5) === "#REF!") {
                                            result0 = "#REF!";
                                            pos += 5;
                                        } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\"#REF!\"");
                                            }
                                        }
                                        if (result0 === null) {
                                            if (input.substr(pos, 7) === "#VALUE!") {
                                                result0 = "#VALUE!";
                                                pos += 7;
                                            } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                    matchFailed("\"#VALUE!\"");
                                                }
                                            }
                                            if (result0 === null) {
                                                if (input.substr(pos, 13) === "#GETTING_DATA") {
                                                    result0 = "#GETTING_DATA";
                                                    pos += 13;
                                                } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                        matchFailed("\"#GETTING_DATA\"");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, err) {return new AST.ConstantError(null, err);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Constant() {
                    var result0;

                    result0 = parse_ErrorConstant();
                    if (result0 === null) {
                        result0 = parse_LogicalConstant();
                        if (result0 === null) {
                            result0 = parse_NumericalConstant();
                            if (result0 === null) {
                                result0 = parse_StringConstant();
                                if (result0 === null) {
                                    result0 = parse_ArrayConstant();
                                }
                            }
                        }
                    }
                    return result0;
                }

                function parse_ReferenceKinds() {
                    var result0;

                    result0 = parse_RangeReference();
                    if (result0 === null) {
                        result0 = parse_AddressReference();
                    }
                    return result0;
                }

                function parse_Reference() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_Workbook();
                    if (result0 !== null) {
                        result1 = parse_ReferenceKinds();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, w, ref) {ref.WorkbookName = w; return ref;})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ParensExpr() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 40) {
                        result0 = "(";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Expression();
                        if (result1 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                                result2 = ")";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, exp) {return new AST.ParensExpr(exp);})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_FunctionName() {
                    var result0, result1;
                    var pos0;

                    pos0 = pos;
                    result1 = parse_letter();
                    if (result1 === null) {
                        if (input.charCodeAt(pos) === 46) {
                            result1 = ".";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [];
                        while (result1 !== null) {
                            result0.push(result1);
                            result1 = parse_letter();
                            if (result1 === null) {
                                if (input.charCodeAt(pos) === 46) {
                                    result1 = ".";
                                    pos++;
                                } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\".\"");
                                    }
                                }
                            }
                        }
                    } else {
                        result0 = null;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, r) {return r.join("");})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Function() {
                    var result0, result1, result2, result3;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_FunctionName();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos) === 40) {
                            result1 = "(";
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_ArgumentList();
                            if (result2 !== null) {
                                if (input.charCodeAt(pos) === 41) {
                                    result3 = ")";
                                    pos++;
                                } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, f, args) {return new AST.ReferenceFunction(null, f, args);})(pos0, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ArgumentList() {
                    var result0, result1, result2, result3;
                    var pos0, pos1, pos2, pos3;

                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_Expression();
                    if (result0 !== null) {
                        result1 = [];
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 44) {
                            result2 = ",";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\",\"");
                            }
                        }
                        if (result2 === null) {
                            if (input.charCodeAt(pos) === 59) {
                                result2 = ";";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\";\"");
                                }
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_Expression();
                            if (result3 !== null) {
                                result2 = [result2, result3];
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        } else {
                            result2 = null;
                            pos = pos3;
                        }
                        while (result2 !== null) {
                            result1.push(result2);
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 44) {
                                result2 = ",";
                                pos++;
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result2 === null) {
                                if (input.charCodeAt(pos) === 59) {
                                    result2 = ";";
                                    pos++;
                                } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\";\"");
                                    }
                                }
                            }
                            if (result2 !== null) {
                                result3 = parse_Expression();
                                if (result3 !== null) {
                                    result2 = [result2, result3];
                                } else {
                                    result2 = null;
                                    pos = pos3;
                                }
                            } else {
                                result2 = null;
                                pos = pos3;
                            }
                        }
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos2;
                        }
                    } else {
                        result0 = null;
                        pos = pos2;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, hd, tl) {var a=[hd]; for(var i=0; i< tl.length; i++) a.push(tl[i][1]); return a; })(pos1, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos1;
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                        result0 = (function(offset, res) {return res==""?[]:res;})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_Formula() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    if (input.charCodeAt(pos) === 61) {
                        result0 = "=";
                        pos++;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"=\"");
                        }
                    }
                    if (result0 !== null) {
                        result1 = parse_Expression();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, exp) {return exp;})(pos0, result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ExpressionAtom() {
                    var result0;
                    var pos0;

                    pos0 = pos;
                    result0 = parse_Function();
                    if (result0 !== null) {
                        result0 = (function(offset, fn) {return new AST.ReferenceExpr(fn);})(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        result0 = parse_Reference();
                        if (result0 !== null) {
                            result0 = (function(offset, ref) {return new AST.ReferenceExpr(ref);})(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            result0 = parse_Constant();
                            if (result0 !== null) {
                                result0 = (function(offset, c) {return new AST.ReferenceExpr(c);})(pos0, result0);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                        }
                    }
                    return result0;
                }

                function parse_PrefixExpression() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_prefix_operator();
                    if (result0 !== null) {
                        result1 = parse_Expression();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, op, exp) { var fix_assoc = function(expr){ if(expr instanceof AST.BinOpExpr){ expr.Left=fix_assoc(expr.Left); return expr; }else{ return new AST.UnaryOpExpr(op,expr);}}; exp=fix_assoc(exp); return exp;})(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    return result0;
                }

                function parse_ExpressionSimple() {
                    var result0;

                    result0 = parse_PrefixExpression();
                    if (result0 === null) {
                        result0 = parse_ExpressionAtom();
                        if (result0 === null) {
                            result0 = parse_ParensExpr();
                        }
                    }
                    return result0;
                }

                function parse_Expression() {
                    var result0, result1;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_ExpressionSimple();
                    if (result0 !== null) {
                        result1 = parse_aux();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, exp, a) {
                            var z=null, i, len=a.postfix.length;
                            if(len>0){
                                z=new AST.PostfixOpExpr(a.postfix[len-1], exp);
                                len--;
                                for(i=len-1; i>=0; i--){
                                    z=new AST.PostfixOpExpr(a.postfix[i], z);
                                }
                            }else{
                                z = exp;
                            }
                            if(typeof(a.infix)!=="undefined")
                                z = new AST.BinOpExpr(a.infix, z, a.expression);
                            return z;
                        })(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        result0 = parse_ExpressionSimple();
                        if (result0 !== null) {
                            result0 = (function(offset, exp) {return exp;})(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                    }
                    return result0;
                }

                function parse_aux() {
                    var result0, result1, result2;
                    var pos0, pos1;

                    pos0 = pos;
                    pos1 = pos;
                    result0 = parse_postfix_operator();
                    if (result0 !== null) {
                        result1 = parse_aux();
                        if (result1 !== null) {
                            result0 = [result0, result1];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, o, a) {
                            if(a.opt===2){
                                a.postfix.push(o);
                            }else if(a.opt===4){
                                a.postfix[0]=o;
                            }else if(a.opt===3){
                                a.postfix.push(o);
                            }else if(a.opt===1){
                                a.postfix.push(o);
                            }
                            a.opt=1;
                            return a;
                        })(pos0, result0[0], result0[1]);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                    if (result0 === null) {
                        pos0 = pos;
                        result0 = parse_postfix_operator();
                        if (result0 !== null) {
                            result0 = (function(offset, o) {return {opt:2,postfix:[o]}})(pos0, result0);
                        }
                        if (result0 === null) {
                            pos = pos0;
                        }
                        if (result0 === null) {
                            pos0 = pos;
                            pos1 = pos;
                            result0 = parse_infix_operator();
                            if (result0 !== null) {
                                result1 = parse_Expression();
                                if (result1 !== null) {
                                    result0 = [result0, result1];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, o, exp) {return {opt:4, infix:o,postfix:[], expression:exp}})(pos0, result0[0], result0[1]);
                            }
                            if (result0 === null) {
                                pos = pos0;
                            }
                            if (result0 === null) {
                                pos0 = pos;
                                pos1 = pos;
                                result0 = parse_infix_operator();
                                if (result0 !== null) {
                                    result1 = parse_Expression();
                                    if (result1 !== null) {
                                        result2 = parse_aux();
                                        if (result2 !== null) {
                                            result0 = [result0, result1, result2];
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                                if (result0 !== null) {
                                    result0 = (function(offset, o, exp, a) {
                                        if(a.opt===2){
                                            a.expression = new AST.PostfixOpExpr(a.postfix[0], exp);
                                            a.infix=o;
                                            a.postfix=[];
                                        }else if(a.opt==4){
                                            a.expression = new AST.BinOpExpr(a.infix, exp, a.expression);
                                            a.infix=o;
                                            a.postfix=[];
                                        }else if(a.opt==3){
                                            a.expression = new AST.BinOpExpr(a.infix, exp, a.expression);
                                            a.infix=o;
                                            a.postfix=[];
                                        }else if(a.opt==1){
                                            var z=null, i, len=a.postfix.length;
                                            if(len>0){z=new AST.PostfixOpExpr(a.postfix[len-1], exp); len--;
                                                for(i=len-1; i>=0; i--){
                                                    z=new AST.PostfixOpExpr(a.postfix[i], z);
                                                }
                                            }else{
                                                z = exp;
                                            }
                                            if(typeof(a.infix)!=="undefined")
                                                z = new AST.BinOpExpr(a.infix, z, a.expression);
                                            a.expression = z;
                                            a.infix= o;
                                            a.postfix = [];
                                        }
                                        a.opt=3;
                                        return a;
                                    })(pos0, result0[0], result0[1], result0[2]);
                                }
                                if (result0 === null) {
                                    pos = pos0;
                                }
                            }
                        }
                    }
                    return result0;
                }


                function cleanupExpected(expected) {
                    expected.sort();

                    var lastExpected = null;
                    var cleanExpected = [];
                    for (var i = 0; i < expected.length; i++) {
                        if (expected[i] !== lastExpected) {
                            cleanExpected.push(expected[i]);
                            lastExpected = expected[i];
                        }
                    }
                    return cleanExpected;
                }

                function computeErrorPosition() {
                    /*
                     * The first idea was to use |String.split| to break the input up to the
                     * error position along newlines and derive the line and column from
                     * there. However IE's |split| implementation is so broken that it was
                     * enough to prevent it.
                     */

                    var line = 1;
                    var column = 1;
                    var seenCR = false;

                    for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                        var ch = input.charAt(i);
                        if (ch === "\n") {
                            if (!seenCR) { line++; }
                            column = 1;
                            seenCR = false;
                        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                            line++;
                            column = 1;
                            seenCR = true;
                        } else {
                            column++;
                            seenCR = false;
                        }
                    }

                    return { line: line, column: column };
                }


                var result = parseFunctions[startRule]();

                /*
                 * The parser is now in one of the following three states:
                 *
                 * 1. The parser successfully parsed the whole input.
                 *
                 *    - |result !== null|
                 *    - |pos === input.length|
                 *    - |rightmostFailuresExpected| may or may not contain something
                 *
                 * 2. The parser successfully parsed only a part of the input.
                 *
                 *    - |result !== null|
                 *    - |pos < input.length|
                 *    - |rightmostFailuresExpected| may or may not contain something
                 *
                 * 3. The parser did not successfully parse any part of the input.
                 *
                 *   - |result === null|
                 *   - |pos === 0|
                 *   - |rightmostFailuresExpected| contains at least one failure
                 *
                 * All code following this comment (including called functions) must
                 * handle these states.
                 */
                if (result === null || pos !== input.length) {
                    var offset = Math.max(pos, rightmostFailuresPos);
                    var found = offset < input.length ? input.charAt(offset) : null;
                    var errorPosition = computeErrorPosition();

                    throw new this.SyntaxError(
                        cleanupExpected(rightmostFailuresExpected),
                        found,
                        offset,
                        errorPosition.line,
                        errorPosition.column
                    );
                }

                return result;
            },

            /* Returns the parser source code. */
            toSource: function() { return this._source; }
        };

        /* Thrown when a parser encounters a syntax error. */

        result.SyntaxError = function(expected, found, offset, line, column) {
            function buildMessage(expected, found) {
                var expectedHumanized, foundHumanized;

                switch (expected.length) {
                    case 0:
                        expectedHumanized = "end of input";
                        break;
                    case 1:
                        expectedHumanized = expected[0];
                        break;
                    default:
                        expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                            + " or "
                            + expected[expected.length - 1];
                }

                foundHumanized = found ? quote(found) : "end of input";

                return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
            }

            this.name = "SyntaxError";
            this.expected = expected;
            this.found = found;
            this.message = buildMessage(expected, found);
            this.offset = offset;
            this.line = line;
            this.column = column;
        };

        result.SyntaxError.prototype = Error.prototype;

        return result;
    })();

    return PEGParser;
});
